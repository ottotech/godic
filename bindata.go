// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// assets/app.js
// assets/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x1a\x6b\x6f\xdb\x38\xf2\x7b\x7e\xc5\x9c\xf6\x43\x64\x24\x6b\xbb\xdd\x76\xd1\x75\xe2\x2c\xd2\xb4\x7b\xd7\xeb\x13\x4d\x7a\x87\x83\x11\x04\xb4\x34\xb6\x59\xcb\xa4\x96\xa4\x62\xbb\x59\xff\xf7\x03\x49\x49\xa6\x24\xca\x49\xdc\xad\x50\xa0\x31\x39\x6f\xce\x93\xd2\x61\x26\x11\xa4\x12\x34\x52\x87\x27\x07\x07\x11\x67\x52\x01\xc2\x10\x3e\x23\x89\x54\x37\x12\x48\x14\xbe\x4e\x70\x81\x4c\xe9\xfd\x84\x48\x09\xaf\x88\x22\x63\x22\xf1\x0d\x9b\x70\xc0\x95\x42\x16\xcb\x1c\xe1\x82\x2f\x52\xce\x90\x29\xb8\x3b\x00\x00\x30\x04\x45\x16\x29\x2e\xc2\x54\xf0\x54\x76\xf2\x0d\xfd\xc8\x2c\xc5\x62\xf9\xa4\x5c\x55\x33\x2a\xbb\x52\x11\xa5\xc5\xb8\x03\xca\x26\x7c\x00\x31\x51\x64\x14\xb8\x8c\x83\x6b\xd8\x58\xa4\xcd\x81\xf9\x4f\x20\x8b\x51\x84\x9a\x41\x49\x4b\xa0\xca\x04\x83\xb0\x5c\xd0\xcf\x69\x4c\x6f\xcf\x2a\x2b\x66\x35\x05\xa9\xd6\x09\x0e\xef\xcc\x7f\xb2\x9b\x6e\xce\x4e\xa5\x12\x9c\x4d\xcf\x0a\xbe\xc0\xc8\x02\x07\x70\xda\xcb\xd7\xef\xb6\xb2\x76\xb5\x9c\xa3\x40\x03\x04\xd7\x9b\xd3\x5e\xba\x27\x87\x4c\xa2\xd8\xc9\x41\x03\x7c\x17\x87\x19\x97\x6a\x27\x07\x0d\xf0\x5d\x1c\x62\x41\x6f\xef\xd1\xc2\x82\x7c\x17\x17\x19\xcd\x70\x41\x76\x72\xb1\x20\xdf\xc5\x25\xe5\x62\xb7\xb5\x34\x80\x8f\xc3\x69\xaf\xe2\x66\x9d\xc2\x57\x37\x45\x14\x5d\x91\x71\x82\x52\x33\xfa\xd1\x31\x54\x91\x4b\x19\xb6\x03\x18\x5d\x1f\x97\xeb\x9b\x1a\x26\x67\x17\x33\xc2\xa6\x78\xc1\x93\x6c\xc1\x5e\xa1\x8c\x60\xd8\xb6\xd3\x1d\x53\x16\x87\x7a\xb3\xce\xbf\x80\x35\x8a\xfa\x88\x94\x1b\x0d\x1a\x79\x48\x47\x85\x25\x5e\xd1\xf8\x3d\xcf\x98\x0a\x5d\xd5\x13\x54\xb9\x36\x30\xcc\x13\x84\xb5\x69\x70\x7d\x52\x01\x8a\x8c\xb0\x5b\x28\x2b\xbc\x01\x2b\xe1\x26\x5c\x40\xa8\x81\xbf\xc2\x10\xfa\x27\xf0\x15\x4e\x73\xe2\xdd\x04\xd9\x54\xcd\x4e\xe0\xeb\xd1\x51\xa7\x66\xcc\x9c\xba\x26\x3d\xba\x3e\xa8\x6c\x95\x04\xa9\x25\x48\xe1\xb4\x10\xa4\xa4\x48\x9b\x14\xf5\x43\x27\x10\xe6\xa0\x23\x7a\x3d\x0a\x8c\x1c\x37\x36\xb5\xc0\x70\x38\xcc\x05\x1b\x7d\xbd\x2e\x12\x8e\x8f\x8a\x35\x60\x22\xbb\x69\x26\x67\x0e\xbd\x4e\x03\x72\x73\x50\xfd\x55\xf9\xd9\xeb\xc1\x12\x81\x21\xc6\xa0\x38\x48\x2e\x14\xa8\x19\x5a\xad\x49\x14\x71\x11\x53\x36\x4d\xd6\xc7\x66\x55\x64\x09\x02\x95\xa0\x66\x44\xd5\xa9\xe8\xfd\x4f\x6f\x61\x49\x93\x04\xa6\x1c\x28\x33\x2b\x13\x2a\xa4\x82\x34\x21\x11\x02\x61\x31\xfc\xf1\x56\x5a\x90\x09\x4f\x12\xbe\x3c\xf6\x51\x11\x28\x15\xf0\x49\x21\x87\x39\xdb\x82\x2c\x99\x28\x14\x4b\x22\x62\xd9\x6d\x9c\x54\x3a\x7f\x13\xaf\x60\x08\x13\x92\x48\x6c\xec\x4e\xe6\xd2\x6e\x8f\xae\xfd\x07\xb9\xb4\x07\xb9\xb4\x07\xb9\x3d\xc5\xe5\xce\x53\x94\xa3\xe5\xf5\x28\xa0\xf2\x26\x15\x74\x41\xc4\xfa\x66\x8e\xeb\xe2\x18\x45\x86\x6d\x27\x57\xc8\xba\x6c\x9e\x16\x60\x22\xb1\x41\x7e\xc2\x05\xd2\x29\x7b\x20\x79\xab\xac\x75\x8d\xe5\x23\x3d\x42\x73\x56\xeb\x14\xf9\xa4\x90\x72\x38\x84\x80\x65\x8b\x31\x8a\xc0\xc7\xd0\xda\xfe\xe3\x58\x87\x96\xb1\x9c\x4c\x13\x1a\x61\x68\xb0\x8f\xe1\x49\x67\xd4\xbf\x6e\x20\xb9\x80\xfd\x63\xe8\x1f\x5b\x12\x9d\x5d\x92\x95\x47\xf5\xcd\x1e\xd5\x37\x38\x2d\x34\x2d\x0e\xeb\x9b\xff\xb0\xac\x03\x34\x45\xb4\xd8\xa3\x6f\xd7\x0f\x11\xf3\x89\x11\x73\x72\xaf\x98\xbd\x1e\x4c\x28\x23\x49\xb2\xd6\xa1\x95\x70\x9e\x02\x99\x12\x13\x10\x82\x67\xd3\x99\x71\x6c\x13\xe3\xa5\x7b\xeb\xd0\x88\x66\x18\xcd\xb5\xf5\x09\x5b\xc3\x8c\x48\x20\xf0\xfa\xc3\x97\xf7\xa0\xcf\xa2\x5b\x67\xf0\x66\x02\x92\x1f\xbb\xa1\x6b\x7b\x39\x20\x10\x65\x52\xf1\x05\xc4\x28\x23\x41\x53\x45\x39\x33\x86\xd3\x31\x9b\xf3\xeb\xfa\xad\x3a\xb7\x56\x9d\xd7\x03\x60\x7e\x4f\x00\xcc\xaf\x47\xc1\x8c\xc8\x1b\x64\xd9\x62\x77\xae\x32\xa0\xf1\xf8\x46\xab\xa4\xbd\x18\x02\xad\x61\x18\x00\x1c\x6d\xf7\x35\x99\x9b\x5b\x92\x64\x3a\xd3\x77\xbf\x72\xca\xc2\x0e\x1c\x41\xd0\x09\x1e\xe7\xc7\x4e\x16\x8d\x8a\x8a\x90\x1f\xff\x81\x07\xc5\xd6\x54\x54\x97\xba\xac\x86\x77\x79\x1d\xb5\xff\x6d\x3a\x6e\xd9\xca\xd2\x98\xa8\xbc\xba\xd1\x48\x1b\x98\x88\x35\x0c\x21\xc4\x0e\x0c\xcf\x7c\x15\xcc\xc6\x3a\x76\x15\x11\x53\x54\xdd\x29\xaa\x73\xa5\x04\x1d\x67\x0a\xc3\x40\x17\xad\x9f\x0d\xd8\xcf\x34\x5e\x05\x9d\x93\x26\xfe\x07\xb2\xc0\x07\x11\x30\xe5\xa2\x46\xc1\x76\x49\x3a\xd7\x50\x16\xf3\x65\x37\xe1\x11\xd1\x42\x77\x53\xc1\x15\x8f\x78\x52\x05\xd7\xed\xa1\x07\x58\x2f\x57\x01\x91\xc5\x29\xa7\x4c\x03\xe7\x2c\x8e\x20\xe8\xf5\x02\x38\xb2\x34\xf4\x2f\x6b\xaa\xc0\xa3\x52\xd1\x2c\xd8\x5e\x2b\x3f\xab\xc2\x58\xad\x05\xde\x00\x38\xe7\xe9\x85\x33\x3d\x97\xce\xf3\x4e\xfd\xef\xf5\xe0\x1d\xaa\x43\x09\x44\xce\x4d\xfc\xe9\x3e\x5b\xbb\xf0\x0c\x7b\xd2\xd4\x1c\x1b\xaf\x84\x29\xa9\xa3\xc9\x0a\x6e\x20\xb5\x79\x21\xde\x1e\x74\x5e\x99\x8c\x28\xdd\x0a\xff\xb5\x69\x55\x22\xce\x26\x54\x2c\xc2\xe0\x5c\x20\xac\x79\x06\x32\xcb\xff\xd0\xd4\xeb\xc4\xab\x74\x8d\x65\xb4\x05\xb7\xc7\x7e\x14\xfc\x1e\x6c\xd3\x8d\x0e\xba\x7f\xac\x51\xd6\xa3\xcc\x4e\x42\x3e\xbf\xde\xb3\x51\xc9\xed\xa9\xfb\xcb\x6a\x94\x45\x3c\x31\x07\x70\x43\xe3\x22\x9e\xca\x4e\x46\x2f\x9d\x34\xa1\x9d\x54\xd4\x40\xa9\xec\x35\x70\x8b\xe3\x2c\x9b\x9c\x8e\x57\x45\x54\xd1\x2c\x2c\xfc\xf1\xb8\xa6\xc9\x02\xd5\x8c\xc7\x03\x08\x3e\x7d\xbc\xbc\x0a\xaa\x1d\xc7\x98\xc7\xeb\x01\xfc\xfb\xf2\xe3\x87\xae\x9e\x92\xd9\x94\x4e\xd6\x61\x33\x7f\xd9\x0e\x8d\xc6\x83\xc2\x01\xb5\xa2\xc7\x2d\x60\x8e\x46\x25\x7c\x45\xcb\x26\x62\xae\xe9\x8d\x76\xb5\x81\xab\x77\x35\xbf\x39\xca\x77\xba\x6a\x86\x2c\x14\xda\xe3\xce\x6a\x0a\x6b\x1f\x11\x68\x43\x2b\x93\xa6\x7c\x3f\xed\xf7\x7d\x79\x99\x24\x28\x54\x18\x6c\xdd\xce\xf5\x3b\x08\x4c\x15\x1a\x23\xb2\xdc\x63\x63\x90\x59\x14\xa1\x94\x93\x2c\x49\xd6\xdd\xa0\x56\x05\x6d\xe3\xd2\xe4\xa2\x65\x51\xb8\x52\x61\x2e\x74\xa8\x7f\x74\x9a\x72\xd7\xa4\x3a\x67\x80\x42\x70\x01\x3c\x8a\x32\x21\x50\x1f\xa1\x8e\x0c\x8d\x7c\xd2\x2c\x05\xf5\x92\xec\x98\x2a\x22\xda\x3f\x26\x19\x33\xb1\x06\xa1\x21\x5b\xb7\x87\x1e\xc3\x78\x82\xdd\x84\x4f\x73\x80\x13\x87\x46\x65\x6e\xf1\x4d\x3e\x3f\x2e\xf9\x4b\x5f\xaa\x74\x66\xb1\x5a\xea\x6c\x86\x5b\xc9\xda\x14\xd5\xfa\x14\x59\xab\x78\x2d\xaa\x56\x46\xc5\x1f\xa2\x6b\xc4\x93\xfb\xb1\x23\x9e\xfc\x7d\x76\x2a\xab\xc8\xc8\xf2\xfe\x9b\x4d\x67\x2e\xac\xec\xc4\x5a\x99\x6b\xf3\x4b\xab\x86\xa8\xdd\x05\x49\xc3\xd0\xfc\x7d\x0c\x54\x5b\xb8\x7a\xe1\x60\x48\x35\xfc\x7e\x8e\xeb\xe1\x1d\xdd\xf8\x73\xd1\x9b\x78\xd5\xbe\xa9\xa3\x7c\x78\x97\x27\xa8\xfc\x62\xab\x85\xcc\xab\x12\x4e\x27\xbe\x16\xa8\x57\x5b\xdb\x95\xe0\x15\x7b\xb6\xe0\xe5\xe3\x7a\x89\x53\x1e\x4b\x13\xbe\xe9\x8d\xc3\xbb\x96\x7b\x8b\x76\xe4\x32\x6a\x6b\xb8\xe5\xba\x17\x35\xa1\xd1\xfc\x92\xdc\x62\x8e\xe4\xed\x01\xab\x88\x3d\xe7\x76\xa8\xe5\x22\xb3\xd8\x7f\xc4\x3d\xa6\x65\x5f\xf1\xad\xa6\xbc\xa7\x57\x3c\x7d\xa9\x58\x6f\x9f\x2b\xab\xb6\xdb\xaa\x3b\x57\xfa\x8b\xb2\x23\x0b\x6b\xa9\xc0\xf5\x6e\x73\x6d\xd5\x75\x0f\xd9\xfa\x78\xc4\x93\xdc\xc3\xdd\xcb\x5c\xc8\x83\x79\x8e\xba\x99\x0e\x82\x46\x4d\x33\xbd\x44\x7d\xd2\xf6\x95\xb5\x9c\xc2\xa7\xb7\x81\xaf\x40\xb9\xa4\x2a\x53\xf5\x0e\x52\x7f\xd4\x49\x35\xc5\x8e\xc7\x57\xeb\x14\x6d\x77\xe3\x0c\x39\x7e\x2d\xca\xed\xae\xe2\x5f\xd2\x14\xc5\x05\x91\xa8\x4d\xa9\x47\xed\xff\x9c\x7f\xbe\xf8\xd7\xf9\x67\xef\xac\x5d\x72\xc9\xff\x38\x82\x20\x0c\xec\xf4\x34\x0a\x6c\x3b\x17\x5c\xfb\xa6\xa5\xcd\x41\x53\x64\x96\x25\x49\xde\x8b\x1b\xfc\xe2\xb7\x73\xc1\x00\xbf\x43\xf0\xbf\xd7\x97\x01\x0c\x20\xf8\xf0\x31\x68\xd2\xc8\x18\xfd\x33\x2b\x29\x50\x79\x63\x17\x1e\x4a\xc2\xba\x4b\xd8\xf4\x60\x25\x8a\xd4\xd6\x8c\x01\x0b\x10\xd7\xae\x77\x8d\x9f\x6d\xce\xee\xe6\xb8\xde\x9c\xf6\x54\xfc\x58\x3c\x6b\x82\xe2\x82\xff\xf1\xf8\xf6\x44\xf6\x42\x2d\x0c\xbf\x17\xb2\x35\xf8\x6e\x54\xef\xba\x7e\xb6\x35\x79\x68\x0d\xe0\x5e\x46\x36\x13\x4b\x05\xcd\x26\xea\x9f\x69\x9c\xa3\xfa\x6b\x43\xf1\xf8\x84\xf7\x02\xfb\x95\xb0\x8a\xe0\x4a\x11\x81\xa4\x15\xa2\xaa\x92\x6e\x15\xf2\x7c\xed\xa4\xa2\x37\xf1\xaa\x5d\x4a\xd8\xdf\x26\xe0\xd8\xe5\xa1\x46\xa9\xe1\xf8\xab\xb5\xfb\x14\xc5\xaa\xa2\xd6\x43\xaa\x9f\xfb\x08\xbe\x94\xc3\xe0\x79\xf3\x3e\xc5\x7d\x22\x9e\x68\xa0\xfe\x6e\x28\xd3\x17\xe5\xaa\xde\x53\xec\x8b\xa7\xd7\xe2\xa5\x5e\xff\x3d\xed\x29\x51\x5d\x75\x87\xa0\x7d\xcb\x6a\xe1\x8c\x77\x0b\x22\xa6\x94\x5d\xf1\x74\x00\xcf\xfb\x1b\x4f\xaa\xd9\xf5\x12\xc9\x94\xcb\xc6\xcb\x23\xc7\xd3\x74\x87\xb5\xc7\xbb\x29\x67\x7e\x2c\x69\xfb\xa9\xb8\xaa\xc4\x54\xa6\x09\x59\x0f\x20\x98\x24\xb8\x0a\x7c\xca\xc0\x83\x62\xe8\xbb\xe2\x67\xa7\x7f\xee\xe8\xb0\xca\x23\x33\xae\xf9\xac\xdd\xe9\xac\x5b\xbe\xd8\xe1\x96\xb9\x4b\xd6\xc5\x76\xcc\xea\x67\xdf\xe6\x97\xe3\x4c\x29\xce\xee\xcb\x6b\x77\x4b\x1a\xab\xd9\x00\x7e\xed\x6f\xda\xb5\xd3\x35\x7f\x18\x58\x82\xed\x0a\xd4\xee\xf3\x9a\xaa\x18\xbf\xfa\x61\xe7\xa7\x3b\xdd\xfa\xf1\x15\xdd\xef\x63\x33\xb6\x24\xb7\xcd\x91\x05\x4c\x5c\x5b\x2b\xf8\x22\xde\xff\xfe\xde\x5e\x52\x78\x4b\x60\x8b\xa3\xcf\x90\xb4\x56\x44\xb1\xab\xca\xcc\xfc\x6c\xde\xe2\xfa\xb4\xa7\x66\x7b\x60\x96\x63\xec\x9e\xf8\xe6\x46\x53\x77\x17\x7b\xe2\x7f\xc8\xfb\x8b\x3d\xd1\xbf\x98\x0e\x63\x5f\xd9\xb7\x71\xd7\x4e\xa1\x99\xe6\x9d\x9d\x5d\xe7\x38\xe6\xf1\xba\x5d\x28\x67\x58\x2a\x46\x16\xdf\xb8\x94\xf3\xf1\xd3\x3a\xed\x19\x45\x1e\x3c\x4a\x15\xb3\x94\x99\xc0\x1e\xfd\xea\xff\x3b\xde\xfc\x8f\x15\xbb\xc9\x8b\xc0\x8d\x39\x82\x01\x04\x8c\x33\xac\x5f\x79\x2a\x76\xc3\x53\x12\x51\xb5\x1e\x40\xbf\xfb\x6c\x5b\x4e\x6b\x5c\x66\x84\xc5\x09\x5e\x46\x82\x27\x49\x71\xb5\xe2\xae\x3d\xe2\xad\xfe\x56\xd0\xfc\xb5\x02\x89\xe3\xd7\xb7\xc8\xd4\x3b\x2a\x15\x32\x14\xe1\xa1\x34\x34\x0f\x8f\x9b\x7c\x5a\xa8\xff\x97\x26\xc9\x17\xb6\x68\x7c\x36\x90\x73\x10\xb8\xe0\xb7\xb8\x27\x13\x77\xa7\xf1\x4d\x82\x76\x13\xbb\xf5\x89\x9b\x8f\x0e\x78\x94\x2d\x90\xa9\xae\xde\xe8\x5a\x16\x57\x3c\xad\xde\x50\xc5\x3c\xf2\xe2\x14\x7f\xe4\xdf\x60\xf9\xd0\xf5\xd0\x58\xe5\x79\x06\x4f\xfb\xf0\xd7\x5f\x55\xa2\x7a\xb1\x53\xfb\x16\xa4\x7a\x4b\xe5\xf5\x90\x71\xc2\xa3\x79\x50\xb9\x5b\xf6\x5c\xe3\x3e\x84\xd2\x07\xed\x6b\x15\x42\xf7\xb4\x67\xf6\x6b\x34\x9b\x2d\xcc\x7b\x06\xe7\x7d\x4d\x91\x43\x78\x7a\x33\x56\xac\xe1\xeb\x65\xb3\xe3\xdc\xa2\x35\x64\xaa\xfa\x7d\xca\x25\xb5\x77\xf2\xc1\x84\xae\x30\x6e\xbc\x09\x50\x8a\x2f\x06\xf0\xb4\x5f\x5d\x17\x74\x3a\x53\x03\xf8\xa5\xb6\xfc\xed\x0d\x8b\x71\x35\x80\xdf\x7e\xab\xae\x4f\x38\x53\x97\xf4\x1b\x0e\xe0\xc9\x8b\x3a\x03\x11\xa3\xf0\xc7\x24\xcf\x54\x42\x59\x4b\xc0\x46\x3c\xe1\x1a\x6f\x2a\x70\x5d\xdf\xca\x84\x34\x7b\xe6\xc5\x07\x8a\xda\x76\x4a\xe2\x98\xb2\xe9\x00\x9e\x3c\xf7\xc9\xf2\x99\xc4\x34\x93\x03\x78\x56\x13\xa6\x48\x0e\x35\xdb\xe6\xeb\x6e\xbe\xb8\xbf\xd3\xf6\xe4\xd3\x1d\xfd\x54\xad\x80\xd8\xc3\xf7\xe7\x6b\x1a\x0f\x83\xc5\xfa\xa5\x6a\xe9\xa3\xca\x3e\x26\xbf\x9f\x7a\x40\xc4\xc1\x10\xfa\xd0\xd2\xbc\x71\xf6\x9e\x67\x12\x3f\xde\xa2\x28\x48\xfa\x42\xc2\xc9\xab\x2f\x60\xd3\x81\xdd\xc4\x32\xf5\x40\x5a\xcf\xfc\xb4\xfc\x75\xef\x9f\x1c\x94\xfe\x97\x7a\x2a\x99\xaf\xe7\xaa\x97\x32\xb7\x92\xd5\x02\xd4\x6c\xa5\x03\x27\x16\xed\xfc\x34\x80\xbe\xc5\xb2\x8e\xa4\xec\x5c\xb4\x85\x2a\x5d\xff\x49\xba\x02\xc9\x13\x1a\xc3\x38\x21\xd1\x3c\x70\xb1\x74\xab\xf8\x52\xb1\x41\x25\x41\x58\xcf\x5f\xce\xa8\x72\xa3\xa2\xf4\xeb\xe0\xc9\xf3\x74\x05\xbf\x3c\x4d\x57\xce\xae\x1e\x70\xce\x13\x3a\xd5\x91\x1e\x61\x2d\x2c\x9c\xf8\xfc\x75\xbb\xba\x23\x8e\xc6\x24\x9a\x4f\x05\xcf\x58\x7c\x91\x4b\xf3\x53\xbf\xff\xe2\xe2\xe5\xb9\x03\x63\xad\xf0\x0e\x27\x3a\x51\x6c\x97\x6b\x51\xbd\x35\xac\xb5\x6b\xcc\x17\x17\x9c\x29\x42\x19\x0a\xb7\x24\xfc\x99\xa1\x58\x5f\x62\x82\xa6\x2d\x38\xfc\x29\x76\xbe\x8a\x3d\xec\x9c\x78\xb0\xaf\x96\x7c\x17\x01\x55\x7e\x89\xa8\xd1\x4d\x27\xf2\xea\xe3\xfb\xbc\x2d\x0a\x31\x74\x3f\xbb\xed\x1c\x57\x28\x7b\xe1\xb7\x5f\x36\xd6\xa0\xaf\x96\xbc\x73\x72\xf0\xff\x00\x00\x00\xff\xff\x3e\x74\x82\x67\x74\x2c\x00\x00")

func assetsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppJs,
		"assets/app.js",
	)
}

func assetsAppJs() (*asset, error) {
	bytes, err := assetsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.js", size: 11380, mode: os.FileMode(420), modTime: time.Unix(1592074088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x53\xdd\x6d\x25\x14\x42\xd9\xc8\x26\xd0\xb4\xd0\x53\x73\x48\x0f\x3d\xca\xd2\xac\x57\xa9\xfe\x21\xcd\x2e\xbb\x18\x7f\xf7\x62\xab\x09\x2d\xdd\x74\x0f\xcd\xc9\x48\x33\xef\xf7\xe6\x0d\x96\x7c\x77\xff\xf5\xe3\xe3\xf7\x87\x4f\xb0\x23\xef\x7a\x26\x97\x0f\x38\x15\xc6\x8e\x63\xe0\xcb\x05\x2a\xd3\x33\x00\x00\xe9\x91\x14\xe8\x9d\xca\x05\xa9\xe3\xdf\x1e\x3f\x37\x1f\xf8\xaf\x12\x59\x72\xd8\x8f\xd1\x58\x2d\x45\x3d\x30\x29\xaa\x56\x0e\xd1\x9c\x7a\xc6\xa4\xb1\x07\x28\x74\x72\xd8\x71\xaf\xf2\x68\x43\xe3\x70\x4b\x1b\xb8\xbe\x4a\x47\x0e\xd6\x74\xdc\x28\x52\x83\x2a\xf8\x25\x6c\x23\xef\xa5\x30\xf6\xd0\x9f\xd3\x51\x4c\x1b\x78\x7f\x95\x8e\xb7\xf0\x0a\x89\xd4\xe0\xb0\xdc\x2b\x52\x2f\x1c\x26\x8b\xce\x36\x51\x1d\xd9\x21\xc1\x62\x07\x1d\x4c\x53\x3b\xcf\xb7\x4c\x8a\xe7\x3a\x9b\x26\xb0\x5b\x68\x1f\x72\x34\x7b\x4d\x36\x86\x79\xae\x39\x6b\x07\x94\xac\x3b\x9e\x51\x69\x6a\x74\xf4\xc9\x3a\x34\x62\x3d\xb6\xe9\x45\xd2\x7a\x1b\xda\xa7\xb2\xd8\xff\xee\x7b\x11\xd1\x98\xe8\xff\x0f\xa3\x52\x3a\xa3\x9a\x26\x74\x05\xcf\x05\xd9\x11\xa5\xb2\x11\x62\x1f\xd2\x8f\xb1\xd5\xd1\xd7\x41\xee\xae\x6f\xc4\xde\x3f\x07\x33\x78\x40\x17\x93\xc7\x40\x0b\x18\x74\x8e\xa5\xc4\x6c\x47\x1b\xfe\x35\xda\x2b\xec\x25\xe4\x1f\xfc\x35\xf5\x9b\x79\x0c\x6a\x40\xd7\x14\x52\xc1\x28\x17\x03\xde\xdd\xd4\xab\x0b\xcb\xa4\x53\xc2\x8e\x13\x1e\xa9\xb6\xf3\xca\x17\x4f\x65\xdd\xe9\x5f\xfb\x0c\x66\x9e\x19\x93\xa2\xfe\xe0\x52\xac\x6f\xe8\x67\x00\x00\x00\xff\xff\xac\x6e\x73\x72\x53\x03\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 851, mode: os.FileMode(420), modTime: time.Unix(1592077244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/app.js":     assetsAppJs,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"app.js":     &bintree{assetsAppJs, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
