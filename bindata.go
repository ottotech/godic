// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// assets/app.js
// assets/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3c\xed\x72\xdb\x38\x92\xff\xfd\x14\x7d\xdc\xab\x8d\x54\x96\x29\x79\x76\xb2\x35\x2b\x4b\xde\x4a\x9c\xec\x5e\x2e\x93\x8f\x1a\x7b\x6e\xeb\xca\x71\x69\x29\xb2\x25\x22\xa2\x00\x2e\x00\x5a\x56\xbc\x7a\xf7\x2b\x00\x24\x05\x92\xa0\x2c\xc9\x99\xbd\x3b\xd6\x54\x4d\x0c\x74\x37\x1a\xdd\x8d\xfe\x02\xec\x17\x99\x40\x10\x92\x93\x50\xbe\xb8\x38\x39\x09\x19\x15\x12\x10\xc6\xf0\x0b\x06\xa1\xf4\x43\x8e\x81\xc4\xb7\x09\x2e\x91\x4a\x35\x9f\x04\x42\xc0\x9b\x40\x06\xd3\x40\xe0\x3b\x3a\x63\x80\x0f\x12\x69\x24\x72\x84\x2b\xb6\x4c\x19\x45\x2a\xe1\xf1\x04\x00\x40\x13\xe4\x59\x28\x19\xef\xa4\x9c\xa5\xa2\x9b\x4f\xa8\x4f\x64\x29\x16\xc3\x17\xe5\xa8\x8c\x89\xf0\x85\x0c\xa4\x62\x63\x0b\xac\x3e\x42\x67\x6c\x08\x51\x20\x83\x5b\xcf\x66\xc2\xbb\xeb\x55\xe0\xc4\x9a\x86\xef\x68\x44\xc2\x40\x32\x3e\x9c\x05\x89\xc0\x2a\x40\x18\x63\xb8\x68\x85\xd8\xd4\x99\x59\xd3\xb0\x58\x0e\xc6\xcd\x31\x7f\x4a\x68\xd4\x51\xc3\xf5\x6d\xe8\x75\x0a\xb0\xab\x38\xa0\x73\x14\x05\x05\xd7\x5c\x83\xd2\xe6\xe4\xa4\xd8\x90\xc5\x41\xa7\x0b\xe3\x4b\x4b\x36\x09\x4a\x10\x61\x8c\xcb\x00\xc6\xb0\x22\x34\x62\x2b\x3f\x61\x61\x20\x09\xa3\x7e\xca\x99\x64\x21\x4b\x2e\x2a\xe0\x31\x13\xd2\x01\xac\x86\xab\x80\x48\xa3\x94\x11\xaa\x80\xf3\x25\x4e\xc1\xeb\xf7\x3d\x38\x35\x34\xd4\x4f\x8a\xbd\xb3\x68\xea\x5d\x9c\x94\xa8\xfd\x3e\xfc\x8c\xf2\x85\x00\x21\x03\x2e\x41\xc6\xa8\x37\x41\xe8\x1c\x48\x21\x77\xdf\xf7\x6b\x82\x46\x79\xad\x14\xdf\x79\xac\x6a\x10\x24\xcf\x70\xd3\xdd\x52\x9f\xa1\x0c\xe3\x4e\xc1\x5a\xaf\x66\x26\x4b\x94\x31\x8b\x86\xe0\x7d\xfe\x74\x7d\xe3\x59\x7a\xed\xfa\x32\x46\xda\xe1\x4a\x09\x97\x35\xa4\xdd\x0c\x68\x0b\xd9\x74\xab\xd6\x38\x03\x45\x4a\xdb\x6a\x26\x60\x3c\x1e\xc3\x0f\x83\x41\xb7\x46\x57\x7d\x41\x82\x5c\x76\xbc\x9b\x18\xb5\xf1\x6a\x2d\xc6\x81\x80\x29\x22\xd5\x62\xc1\x08\x44\x16\x86\x28\xc4\x2c\x4b\x92\xb5\xef\x75\x1b\x34\x1a\x9a\xe2\x38\x83\x31\x78\x7d\xaf\x01\xca\x51\x66\x9c\x56\x86\x37\x27\x55\x00\xe1\x4b\x7c\x90\x9d\x5c\x20\x1d\xf5\x43\xb7\x29\x13\x8b\xf7\x57\x14\x90\x73\xc6\x81\x85\x61\xc6\x39\x46\x3d\x58\xb3\x8c\x6f\xf7\xb3\x24\xf3\x58\x02\x65\x12\xa6\x58\xec\x29\x64\xcb\x34\x41\x89\xc9\xda\x87\xcf\x09\x2a\x30\x9e\x51\x08\xe6\x01\xa1\xa5\x49\xc0\x2c\xa3\xa1\xda\xd2\x10\xbe\x50\x65\x56\x9a\x99\x8b\x2a\xfb\x5d\x5b\x89\x61\xa0\xb4\x5f\xa0\x41\x47\x33\x56\x97\xbb\xf2\x3c\x2c\x41\x3f\x61\xf3\x1c\xe0\xe2\x99\xfa\xfe\xd7\x4b\xa2\xce\xf7\xa6\xea\x15\x5a\xbc\xcb\xff\x35\xef\xa0\xd9\x3c\x0b\x0d\x7f\x4f\xf8\x08\x0d\xbb\x97\x87\xa8\xb9\xf0\x63\x5d\xc4\x5f\xdf\x1e\xeb\x21\xea\x0c\x3c\xcf\x45\x28\xa8\xaf\x82\xd1\xf2\x48\x2a\x73\x6a\x39\x92\x85\xf0\x29\xae\x6e\x82\x69\xa2\x95\x6e\x82\x22\xc5\xd5\x44\xea\x21\xef\xee\xa2\x15\x2f\x42\x65\x8a\x51\x0d\x37\x1f\xdd\x03\x3f\x64\x49\xb6\xa4\x5b\x83\x33\xf8\x66\x74\x52\xe8\xf9\xe9\xf5\xaf\x58\xd2\x5c\xdd\x50\xd9\x89\x4e\x71\x55\x41\x55\x9b\xb6\xd0\x9c\x78\x4a\x11\xa5\xb8\xfc\x04\xe9\x5c\xc6\x5a\x1d\x03\xf8\xfd\xef\x9d\x18\xea\xab\x08\x6a\x6f\xac\x8a\x78\x0e\x5d\x4b\xed\x6c\x6f\x9c\x5c\x12\x15\x78\x97\x71\x15\x5f\xee\xc1\xca\x4c\x22\x62\x28\xb4\xa3\x8a\x83\x7b\x84\x80\xae\x21\xd7\x9e\x0f\xef\x24\x10\x01\x59\x7a\x26\xd9\x59\x14\x48\x74\x85\xa4\xe2\x33\xf1\xc6\xad\xb0\x4d\xab\x1a\x25\x4b\x3f\x88\xb9\x0a\x61\xaf\x71\xc6\xf8\x36\x3f\x90\x76\x98\x14\x21\x67\x49\x02\x11\x5b\x51\x08\x68\x94\x3b\x88\x20\x49\x0a\x56\x21\x42\x89\xa1\xc4\x08\xa6\x6b\x98\xb3\x88\x84\x3d\xa5\xed\x35\xcb\x60\x15\x50\x09\x1e\x9c\xb6\x32\xee\x49\x06\x29\x67\x21\x62\x04\x2b\x22\xe3\xd2\x13\xc7\x9c\x51\xf2\x4d\x3b\x3d\x48\x39\x0a\x01\x9f\xde\xfb\xf0\xb7\x18\x29\xe0\x03\x11\x52\xb1\x99\x9b\x1c\x04\x1c\x21\x4b\x95\x8c\x22\xb3\x3e\xac\x48\x92\x00\xc7\x25\xbb\xc7\x27\x96\x8f\x51\x91\xbf\x27\x2c\x53\xfb\x10\x21\x27\xa9\x5a\x53\x80\x08\xee\x55\x60\x11\xcc\x26\x39\x63\x3c\x44\xbd\x33\xc9\xf2\x25\x8d\xd3\x34\x9c\xbc\xa8\xd2\xf0\xbf\xd0\x2f\xb4\x99\x1c\x14\xe2\x5f\x6a\xd9\x1b\x25\x9c\x7a\xde\x21\xe7\xe6\x72\xb7\x95\x29\xca\xa7\x63\xf0\xbe\xd0\x9b\x18\x39\x6a\x01\x51\x5c\x81\x71\x2c\x60\x6a\x8a\x68\xd8\xc6\x9c\xfa\x66\x8c\x43\x47\x71\x49\x60\x0c\x83\x0b\x20\x30\x82\x3a\x1b\x17\x40\x4e\x4f\x77\xf1\x61\xf3\x72\xa6\x14\xb1\x25\x71\x4b\xee\x54\x68\xda\xc5\x82\xdb\x70\xdd\xa3\x4a\x4a\x4e\x5f\xb1\xb7\xa4\xae\xd9\x12\x0b\x01\xe9\xc3\xa8\x53\xc3\x9c\xe6\xc1\xa2\x72\xf1\x72\x84\xb8\x2a\x64\x7e\x03\x91\x39\x1d\xe5\x81\xc6\xb5\x4d\xa3\x95\x04\x0b\x9f\x40\x9a\xe7\xf4\x60\x21\xba\xb8\x3b\x44\x88\x7f\x3f\xcb\x49\x40\xe7\xdf\x1f\x2b\xc4\x6e\xc9\xdd\xad\xb7\x44\x19\x28\x2f\xe7\xdd\xdd\x7a\x34\x58\xa2\x77\xb7\xe9\x2a\xbe\xb5\x11\x3c\x8d\xa2\xc1\x26\x25\xa2\xc8\x66\x33\xe4\x18\x69\x7f\x30\x63\x49\xc2\x56\x7a\xef\x06\x7b\xf8\x85\xba\xe8\xe5\xb3\x93\x25\x0a\x11\xcc\x15\xa1\x2f\xf4\xef\xdf\xfb\x40\xd8\x01\xea\xb0\xe3\x50\x38\xd8\xef\x76\x1e\x2c\x56\x8e\x56\xa4\x45\x4a\xcb\xd0\xa9\xba\x3a\x90\x9e\x50\x50\xdf\x53\xbe\xb5\xe0\x7f\x84\x53\xd6\x47\x46\x79\xe6\x42\xd2\xf6\xb1\x31\xce\xe8\x18\x2f\x7d\xbc\x98\xb7\xbc\x28\x29\xe6\xa4\xda\xc5\x6c\x03\x3c\x4b\xc4\xad\x41\x72\xad\xf3\xdb\x90\xd1\x19\xe1\xcb\xce\x52\xcc\xbb\xee\x2c\x47\xe9\x63\x8d\x62\xd7\x4e\x1b\x5d\xa3\x4e\x0b\xad\x26\x93\xb5\xa2\x62\x03\x98\x08\x6c\xa9\x21\xf6\x2d\xeb\x61\x47\x41\x3b\x84\x96\x32\xdc\xc5\xcc\xc1\x85\xf9\x11\x65\xd4\xae\x5a\xbe\xac\x89\xf3\x0c\x86\x23\x8d\x90\x77\xba\xf5\x02\x38\x66\xab\x6b\xbb\xc6\x2f\x1b\x79\x8a\x0d\xbf\x52\xfe\x5f\x34\x30\xaf\x2a\x4c\x56\x51\xab\x1b\xa8\xe2\x92\xe6\xb0\x32\x95\x06\x33\x75\x19\x11\x6b\xa9\x51\x95\x6d\xa5\x96\xf1\xa3\x77\x9d\x27\xcb\x45\xa2\xdc\x83\xd4\xb4\x15\x56\x01\x91\xde\xa6\x7f\x79\x52\x33\x97\x62\xdd\xea\x56\x0e\x5f\x58\xe3\xdb\x2b\x17\x41\xe6\x49\x0e\xda\x57\xa2\x59\x62\x35\x20\xb6\x26\x65\x0a\x0b\xe8\x54\x10\x47\x11\xb9\xbf\x6c\x98\xe5\x63\x49\xaf\x79\x7e\x46\xd3\x4c\x4a\x46\x9d\x67\x40\xc8\x75\x82\xe3\xc7\xc7\x15\x89\x64\x3c\x84\x3f\x0e\x7a\x10\x66\x5c\x28\x4b\xf4\x74\xe7\x00\xb9\xd7\x83\x65\xc0\xe7\x84\xbe\x66\x52\xb2\xe5\x10\x7e\x18\x6c\xdc\x9e\x44\xae\x53\x1c\x7b\x66\x35\xb7\xdb\x64\xf4\x2a\x21\xe1\x62\xfc\xd8\xda\x02\x6e\x52\x6e\x6e\x56\x7d\x4a\x39\xcd\x9d\xf6\xcd\xe2\x4d\x94\x51\x5a\x6c\x55\xff\x4f\xf8\xe9\xe6\x72\x24\x24\x67\x74\x7e\x59\xd6\x83\xca\xcb\x0e\x61\xd4\xcf\xc7\x1f\x2d\x2b\x27\x74\xc6\x4a\x37\x3c\xea\xa7\x47\xae\x90\x09\xe4\x3b\x57\x50\x00\xcf\x5a\x21\x66\x42\xee\x5c\x41\x01\x3c\x6b\x85\x88\x93\xfb\x27\x76\x61\x40\x9e\xb5\x8a\x69\xa7\xed\x5c\xc5\x80\x3c\x6b\x95\x94\xf1\xdd\xd2\x52\x00\xae\x15\x46\xfd\xca\x31\x2c\x1b\x93\x9b\xe2\x92\xa8\xea\x3c\x76\xdf\x12\x4d\x88\xf8\xc0\x32\xaa\x2a\xe8\xb1\x09\x00\xb9\x33\x3f\xe2\xfa\x48\xb7\x16\xf0\x41\x16\x4e\x5a\xcf\xeb\xb0\xd8\x76\xc5\xa4\xe6\x86\x1a\xa7\x7e\xf1\x63\x3c\xdb\x8d\x45\x6d\x3b\xd2\x76\x55\x13\x16\x7b\x7b\x43\x22\xbd\xa9\x4a\x28\xd2\x44\x2a\xdb\x95\x3c\xc3\xed\xb2\x02\xe5\x3b\xe5\x73\xee\x83\xa4\x53\x5b\xb0\x07\x2f\x07\x83\x7a\x03\xd8\xe2\xcf\xd5\xf6\x8d\x98\x9a\xf1\x7c\xaf\x5d\x3e\x46\xd9\x55\xf9\xe8\xd0\x15\x3d\x28\x10\xb5\x53\x42\x23\x7c\xf8\x34\xeb\x78\xbe\xd7\xad\x06\x32\x0d\x34\x1e\xc3\xd9\x79\x23\xca\xe3\x83\x3c\x1d\x47\x4c\xee\x8e\x02\x39\x93\xa2\x58\x4a\x24\x24\x44\x45\xb6\xa7\x7f\x34\x59\x64\x2d\x0b\xd1\xc5\x05\x93\x95\xb6\xd7\x39\xfc\xf3\x9f\x50\x1f\xfc\x01\x5c\x09\x59\x93\xb3\x56\xee\x0a\xf0\x92\xbb\x6c\x2a\x24\xef\x0c\x7a\x4a\x3a\xf5\x2b\x0a\x47\xfc\x52\x9c\xd6\x34\xfe\x44\x36\xa4\x6d\x51\x9b\x62\xb7\x46\xaf\x6e\x5e\x7f\x23\x49\xf2\x2b\x5d\xee\x61\x61\xf9\x81\xb2\x88\x38\x72\x24\x77\xa8\x8d\xcf\x1d\x91\xb6\x66\x36\x9b\x9a\x5f\xb0\x71\xba\x75\xaf\x60\x7a\x09\xca\xfd\xfc\x4b\x2f\x8e\xf3\x62\x06\x6e\xef\xda\x6f\x79\x59\x5e\x1b\x5f\xe9\x02\xe4\x0d\x8a\xb0\x38\x22\xcd\x99\xf6\x1b\xdf\x02\x56\x6f\xd4\x45\xa4\x9c\x38\xce\x81\xe8\xe3\x5b\x6d\xdc\xdf\x34\x1a\xf6\xdb\x26\xfd\x16\xea\xca\xd1\x21\x2f\x0b\xb8\xaf\xa6\x80\xfb\x0a\xa3\x9c\x78\x59\xbf\x7d\x6d\xd6\x6f\x39\x75\x45\xfa\xf6\xae\x5a\x3b\xb5\xf7\x51\x9e\xac\x08\xb7\x0d\x21\xab\xa0\xcb\x1b\x1c\xfa\x34\x1b\xc6\x6e\xbf\x96\xd5\x60\x5b\xb5\xa5\x78\xf3\xd3\x4c\xc4\x16\xbd\x66\xf3\x7a\x53\x3b\xbd\x95\x1f\xfb\x7d\x58\xa9\xd2\x18\x23\x90\x0c\x04\x2b\x6e\xa7\xd4\xae\x83\x30\x64\x3c\x22\x74\x9e\xac\x7b\x7a\x94\x67\x09\x02\x11\x20\xe3\x40\xd6\xa9\xa8\xf9\xcf\xef\x4d\xfb\x76\xce\x20\xbf\xec\x9b\x11\x2e\x24\xa4\x49\x10\xa2\x6e\x6a\xff\xe5\xbd\x28\x3a\xbc\x49\xc2\x56\x3d\x17\x15\x8e\x42\x02\x9b\xd9\x0d\xdf\x92\x6c\x30\x93\xc8\x57\x01\x8f\x84\xdf\xd0\x54\xba\x78\xa7\x3d\xb9\xf6\x02\x8d\xd9\xd9\x42\x98\xe9\xdb\x3b\xb7\x22\x57\x46\x91\x2b\xa3\xc8\xad\x16\x57\x3b\xb5\x28\x6e\x57\x77\xb7\x1e\x11\x93\x94\x93\x65\xc0\xd7\x93\x05\xae\x0b\x35\xf2\x0c\xdb\x34\x57\xf0\xba\x6a\x6a\x6b\x5b\xc4\xd8\xe4\x67\x8c\x23\x99\xd3\x3d\xc9\x9b\xcd\x1a\xd3\x58\x1d\x68\x11\xda\x95\xaf\x53\x64\xb3\x82\xcb\xf1\x18\x3c\x9a\x2d\xa7\xc8\x3d\xd7\x82\x46\xf6\x9f\xa6\x5f\x75\x03\x21\x11\xbe\x48\x75\x6c\xd3\xd8\x3d\x38\xef\xde\x0e\xee\x1a\x48\x36\xe0\xa0\x07\x83\x9e\x21\x51\x2f\xb9\xdd\xaa\xfa\x66\x54\xf5\x0d\x46\xc5\x4e\x0b\x65\x7d\x73\x2b\xcb\x18\x40\x93\x45\x83\x7d\xfb\xed\x6e\x1f\x36\xcf\x35\x9b\xb3\x27\xd9\xec\xf7\x61\x46\x68\x90\x24\x6b\x75\xb4\x12\xc6\xd2\xf2\xf6\x9b\xb3\x6c\x6e\xee\x5e\x4c\x6b\xa7\xbc\x59\x29\xef\x7b\xc8\x4c\xdf\x4e\xc5\x81\x80\x00\xde\x7e\xfc\xf5\x83\x2e\xb5\xfc\xfa\x02\xef\x66\x20\x58\xcf\x3e\xba\xe6\xb2\x01\x02\x08\x33\x21\xd9\xd2\xbe\x20\xd1\x82\x53\x67\x36\x5f\xcf\x77\x4b\x75\x61\xa4\xba\xa8\x1f\x80\xc5\x13\x07\x60\x71\x77\xeb\xc5\x81\x98\x20\xcd\x96\xbb\x7d\x95\x06\x8d\xa6\x13\xb5\x25\x65\xc5\xe0\xa9\x1d\x76\x3c\x80\xd3\xed\xbc\x22\x33\xb9\x0f\x92\x4c\x79\x7a\xff\x2b\x23\xb4\xd3\x85\x53\xf0\xba\xcd\x3a\x73\xa7\x1d\x5b\x5e\xb4\xbc\x33\xcd\xd5\x7f\xe2\x40\xa9\xa7\x27\x26\x8e\x9a\xff\x6d\xba\x76\xd8\x32\xf7\x51\x26\xba\x11\xdd\xff\x09\xf8\x5a\xa5\xa5\xe8\xc8\x4b\x35\x01\x73\xd6\xd1\x97\x01\x9f\xa3\xf4\xe7\x28\x5f\x49\xc9\xc9\x34\x93\xd8\xf1\x54\xd0\x3a\xd3\x60\x67\x24\x7a\xf0\xea\x09\xbe\x9a\xf8\x18\x2c\x71\x2f\x02\x3a\x5c\xd4\x28\xfc\x6f\x3e\x88\x30\xa2\xaa\xe7\xe4\xda\xf4\xab\x49\xb9\xd1\x55\x21\xac\xd6\x00\xaf\x01\x2c\x7d\x3a\xe1\x74\xce\xa5\xfc\xbc\xeb\x01\x46\x20\x16\xfa\xfc\xa9\xea\x5b\x99\x70\x8c\x7d\xa1\x63\x8e\x39\xaf\x01\x95\xa2\x76\xe7\xa8\xc4\x0b\xd1\x56\xd1\x79\x64\xd2\xac\xf8\x95\xf5\xab\x3d\x54\xef\x15\x37\x57\x98\x22\xcb\xff\xa1\x6f\x69\x6b\xc4\xab\x74\xb5\x64\x74\x4b\xb2\x54\xfb\xa9\xf7\x67\xeb\x42\x5a\x1d\xba\x7f\x73\xf4\x5f\x6b\x0f\xa1\x36\x8e\xcc\xe7\xb0\x44\x25\x97\xa7\xca\x2f\xab\xa7\x2c\x64\x89\x56\xc0\x84\x44\xc5\x79\x2a\x33\x19\x35\x74\xd1\x84\xb6\x5c\x51\x03\xa5\x32\xd7\xc0\x2d\xd4\x59\x26\x39\x5d\xe7\x16\x8f\x7a\x23\xa7\xbe\x29\x8b\xd6\x43\xf8\xcf\xeb\x4f\x1f\x7d\x21\x39\xa1\x73\x32\x5b\x77\x1c\x95\x91\xce\xd0\x48\x34\x2c\x0c\x50\x6d\xb4\xd7\x02\x66\xed\xa8\x84\xaf\xec\xb2\x89\x98\xef\x74\xa2\x4c\x6d\x68\xef\xbb\xea\xdf\x2a\x4f\xc3\xda\x5f\xef\x1c\xfc\x5a\x6f\x6b\x76\xb6\xdd\x81\xb7\xbd\x72\x2c\x6e\xfd\x77\x3d\xdd\xfb\x7f\xde\xac\xdf\xab\xf3\x6e\x6c\xce\x55\xf9\xfc\x76\xce\x5f\xb8\x5c\xa5\x55\x8b\xd5\x5c\x67\xf3\xb8\x95\x4b\xeb\xa0\x5a\xaf\x22\x6b\x11\xaf\x65\xab\x95\x52\xf1\x37\xd9\x6b\xc8\x92\xa7\xb1\x43\x96\x7c\x3f\x39\x95\x51\xe4\xd6\xac\xfd\x9d\x45\xa7\x5b\x0f\xa6\x62\x75\xf5\x1f\x1a\xac\xfa\xcb\x20\xed\x74\xf4\xbf\x7b\x40\x94\x84\xab\xed\x06\x4d\xaa\x61\xf7\x0b\x5c\x8f\x1f\x49\xb3\x95\x5e\xec\xb3\x7d\x52\x9d\xf2\xf1\x63\xee\xa0\xf2\x76\x77\x0b\x99\x37\x25\x9c\x72\x7c\x2d\x50\x6f\xb6\xb2\x2b\xc1\x2b\xf2\x6c\xc1\xcb\xcb\xf5\x12\xa7\x54\x4b\x13\xbe\x69\x8d\xf9\xf5\x42\x73\xa2\x1d\xb9\x3c\xb5\x35\xdc\x72\xdc\x89\x9a\x90\x70\x71\x1d\xdc\x63\x8e\xe4\xcc\x01\xab\x88\xfd\x66\x73\xe8\xb0\x96\x94\xfb\xf6\x47\x2f\x5f\xb1\x2d\xc7\x35\xd0\x0d\x4b\x5f\x4b\xda\x3f\xb0\x91\xad\x09\xb6\x75\xab\x1e\x6d\xee\xaf\xca\x8c\xac\xde\x8b\xb5\xad\x3b\x6f\x48\x5b\x4a\x36\x36\x1e\xb2\x24\xb7\x70\x78\x3c\x69\x64\x1d\x0b\x54\xc9\xb4\xe7\x35\x62\x9a\xce\x25\xea\x95\xb6\x2b\xac\xe5\x14\x3e\xbf\xf7\x5c\x01\xca\x26\x55\xa9\xaa\x77\x90\xfa\x4b\x9d\x54\x93\xed\x68\x7a\xb3\x4e\xd1\x64\x37\x56\x91\xe3\xde\x45\x39\xed\x4b\xf6\x6b\x9a\x22\xbf\xd2\xd7\xe4\xa6\xd4\xfe\xaf\x57\xbf\x5c\xfd\xc7\xab\x5f\x9c\xb5\x76\xb9\x4a\xfe\x8f\x53\xf0\x3a\x9e\xa9\x9e\x6e\x3d\x93\xce\x79\x77\xae\x6a\x69\x73\xd2\x64\x99\x66\x49\x92\xe7\xe2\x1a\xbf\xf8\xd9\x6a\x30\xc0\x9f\xc1\xfb\xef\xb7\xd7\x1e\x0c\xc1\xfb\xf8\xc9\x6b\xd2\xc8\x28\xf9\x47\x56\x52\x20\x62\x62\x06\xf6\x25\x61\xcc\xa5\xd3\xb4\x60\xc9\x0b\xd7\xe6\xbe\x14\x1c\xc9\xa8\x76\xe9\xa3\xed\x6c\x73\xf9\xb8\xc0\xf5\x66\xd4\x97\xd1\xa1\x78\x46\x04\xc5\xb5\xdf\xe1\xf8\x46\x23\x47\xa1\x16\x82\x3f\x0a\xd9\x08\x7c\x37\xaa\x73\x5c\x7d\xdb\x98\x3c\x36\x02\xa8\xbc\xb6\xda\x8d\x66\x1c\xf5\x19\x89\x72\x54\x77\x6c\x28\x3e\x17\xf3\x4e\x60\xf7\x26\xcc\x46\xf0\x41\x06\x1c\x83\x56\x88\xea\x96\x54\xaa\x90\xfb\x6b\xcb\x15\xbd\x8b\x1e\xda\xb9\x84\xe3\x65\x02\x96\x5c\xf6\x15\x4a\x0d\xc7\x1d\xad\xed\xaf\x08\x56\x95\x6d\xed\x13\xfd\xec\x8f\xb3\x95\x18\x7b\x2f\xdb\x9f\x3b\x41\xde\xaf\x19\x7b\x2f\x07\xbb\xa1\x74\x5e\x94\x6f\xf5\x89\x60\x5f\x7c\xfd\x16\x2b\x75\xda\xef\xa8\x2f\x79\x75\xd4\x2e\x82\x8e\x0d\xab\xe5\x5b\x08\xf3\xda\xe1\x86\xa5\x43\x78\x39\xd8\x38\x5c\xcd\xae\xab\x65\x1d\x2e\x1b\x57\xca\x96\xa5\xa9\x0c\xeb\x88\x1b\x6b\xab\x7e\x2c\x69\xbb\xa9\xd8\x5b\x89\x88\x48\x93\x60\x3d\x04\x6f\x96\xe0\x83\xe7\xda\x0c\xec\x75\x86\x9e\x75\x7e\x76\xda\xe7\x8e\x0c\xab\x54\x99\x36\xcd\x1f\xdb\x8d\xce\x98\xe5\x4f\x3b\xcc\x32\x37\xc9\x3a\xdb\x96\x58\xdd\xcb\xb7\xd9\xe5\x8e\x27\x35\xb0\xe7\xb3\x9a\x96\x47\x34\xb0\xd7\x43\x1a\xa8\xea\x84\x9a\xb4\xdd\x65\x6a\xbf\x99\x4a\xad\x87\x3c\xa5\x46\x8b\x84\xf8\x50\x27\x2e\x82\xfb\x66\x15\x03\xbb\x5f\xf4\xf4\x9d\xa9\xf0\xc8\xf4\x2d\x9c\x51\xb1\xc5\xf6\x63\x0c\x5a\x83\x24\xdf\x15\x78\x62\xf7\x32\xef\x71\x3d\xea\xcb\xf8\x08\xcc\xb2\xb2\x3d\x12\x5f\x37\x39\x55\xc2\x71\x24\xfe\xc7\x3c\xe5\x38\x12\xfd\x57\x9d\x74\x1c\xcb\xfb\xf6\x28\xb6\x53\x68\x7a\x7e\x6b\x66\x97\x1e\xa7\x2c\x5a\xb7\x33\x65\xd5\x4f\x45\x15\xe3\xaa\xa0\xf2\x75\xdc\xb4\x46\x7d\xbd\x91\x43\xab\x2b\x5d\x93\x1d\xfc\x18\xe0\x19\x6f\x01\xa6\x92\x4e\xf2\xb0\x30\xd1\x1a\x18\x82\x47\x19\xc5\x7a\x13\x54\xd2\x09\x4b\x83\x90\xc8\xf5\x10\x06\xfe\x8f\xdb\x00\x5b\x5b\x25\x0e\x68\x94\xe0\xb5\xf9\x3d\xa5\x71\x73\xec\x80\x7b\xfe\x2d\xa3\xf9\x45\x43\x10\x45\x6f\xef\x91\xca\x9f\x89\x90\x48\x91\x77\x5e\x98\xdf\x87\x7a\xd1\x6b\xae\xd3\x42\xbd\xed\x9d\x48\xbe\x82\xf9\x35\xa5\x23\x17\xb1\x67\x1a\xaf\x14\x94\x95\x98\xa9\xcf\x4c\x3f\x43\x60\x61\xb6\x44\x2a\x7d\x35\xe1\x9b\x25\x6e\x58\x5a\xed\x59\x45\x2c\x74\xe2\x14\xff\xc8\xff\x14\x81\x0b\x5d\x95\x91\xd5\x35\x2f\xe1\x87\x81\x79\x17\x14\x56\x07\xbb\x3b\xdf\xe0\x38\x2d\x64\x9a\xb0\x70\xe1\x55\xba\xcd\x8e\xc6\xee\x3e\x94\x3e\x2a\x5b\x83\xb6\xf7\x3d\x8e\x84\xcd\xfc\x51\x06\xe3\x2c\xf4\xcd\x83\x75\x83\x53\xb8\x10\x96\x4e\xa6\x92\x36\x6c\xbd\x4c\x7f\xac\xbe\x5a\x83\xa7\xaa\xdd\xa7\x4c\x10\xd3\xa5\xf7\x66\xe4\x01\xa3\xc6\xdd\x40\xf1\x06\xb6\x3a\xce\xc9\x3c\x96\x43\xf8\x43\x6d\xf8\xdb\x3b\x1a\xe1\xc3\x10\xfe\xf4\xa7\xea\xf8\x8c\x51\x79\x4d\xbe\xe1\x10\xce\x7f\xaa\x2f\xc0\x23\xe4\xee\x33\xc9\x32\x99\x10\xda\x72\x60\x43\x96\xe8\xf4\x62\xce\x71\x5d\x9f\x6a\xbc\xe8\xad\x6e\x39\x88\x22\x42\xe7\x43\x38\x7f\xe9\xe2\xe5\x97\x20\x22\x99\x18\xc2\x8f\x35\x66\x0a\xe7\x50\x93\x6d\x3e\x6e\xfb\x8b\xa7\x73\x6f\x87\x3b\x7d\xfa\xd1\x72\x55\xf9\x2d\xbf\x29\x12\x8d\xbd\xe5\xfa\xb5\x7c\xea\x3d\x72\xde\xb1\xda\xe3\xc4\xc1\x18\x06\xd0\x92\xbb\x31\xfa\x81\x65\x02\x3f\xdd\x23\x2f\x48\xba\x8e\x84\xe5\x57\x7f\x82\x4d\xb7\xe5\xf7\x32\x0a\x62\x99\xdc\x93\xd6\x8f\x6e\x5a\xee\xb0\xf7\x57\x06\x52\xfd\x97\x3a\x02\x99\x2b\xe5\xaa\x47\x32\x2b\x90\xd5\xce\xa7\x9e\x49\x87\xd6\x51\x34\x05\xd5\x10\x06\x06\xc9\xd8\x91\x34\x85\xd2\x16\xaa\xb4\xfc\xf3\xf4\x01\x04\x4b\x48\x04\xd3\x24\x08\x17\x9e\x8d\xa5\x12\xc5\xd7\x92\x0e\x2b\xfe\xc1\x18\xfe\x2a\x26\xd2\x3e\x14\xa5\x59\x7b\xe7\x2f\xd3\x07\xf8\xc3\x0f\xe9\x83\x35\xab\x2a\x9e\x57\x09\x99\xab\x83\x1e\x62\xed\x54\x58\xc7\xf3\x8f\xdb\xd1\x1d\xc7\x68\x1a\x84\x8b\x39\x67\x19\x8d\xae\x72\x6e\x7e\x37\x18\xfc\x74\xf5\xfa\x95\x05\x63\xa4\xf0\x33\xce\x94\x9f\xd8\x0e\xd7\x0e\x75\x5d\xae\x11\x5b\x5e\x31\x2a\x03\x42\x91\xdb\x11\xe1\x1f\x19\xf2\xf5\x35\x26\xa8\xb3\x82\x17\xbf\x8b\xac\xbf\x07\xf3\xa2\x7b\xe1\xc0\xbe\x59\xb1\x5d\x04\x64\xf9\x34\x51\xa1\xeb\x44\xe4\xcd\xa7\x0f\x79\x52\xd4\xc1\x8e\xfd\x07\x67\xba\xbd\x0a\x65\x27\xfc\xf6\xa9\x63\x0d\xfa\x66\xc5\xba\x17\x27\xff\x13\x00\x00\xff\xff\x60\x81\x31\xc4\x7a\x47\x00\x00")

func assetsAppJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsAppJs,
		"assets/app.js",
	)
}

func assetsAppJs() (*asset, error) {
	bytes, err := assetsAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/app.js", size: 18298, mode: os.FileMode(420), modTime: time.Unix(1593369997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x4f\x6b\xdc\x30\x10\xc5\xef\xfa\x14\x53\xdd\x6d\x25\x14\x42\xd9\xc8\x26\xd0\xb4\xd0\x53\x73\x48\x0f\x3d\xca\xd2\xac\x57\xa9\xfe\x21\xcd\x2e\xbb\x18\x7f\xf7\x62\xab\x09\x2d\xdd\x74\x0f\xcd\xc9\x48\x33\xef\xf7\xe6\x0d\x96\x7c\x77\xff\xf5\xe3\xe3\xf7\x87\x4f\xb0\x23\xef\x7a\x26\x97\x0f\x38\x15\xc6\x8e\x63\xe0\xcb\x05\x2a\xd3\x33\x00\x00\xe9\x91\x14\xe8\x9d\xca\x05\xa9\xe3\xdf\x1e\x3f\x37\x1f\xf8\xaf\x12\x59\x72\xd8\x8f\xd1\x58\x2d\x45\x3d\x30\x29\xaa\x56\x0e\xd1\x9c\x7a\xc6\xa4\xb1\x07\x28\x74\x72\xd8\x71\xaf\xf2\x68\x43\xe3\x70\x4b\x1b\xb8\xbe\x4a\x47\x0e\xd6\x74\xdc\x28\x52\x83\x2a\xf8\x25\x6c\x23\xef\xa5\x30\xf6\xd0\x9f\xd3\x51\x4c\x1b\x78\x7f\x95\x8e\xb7\xf0\x0a\x89\xd4\xe0\xb0\xdc\x2b\x52\x2f\x1c\x26\x8b\xce\x36\x51\x1d\xd9\x21\xc1\x62\x07\x1d\x4c\x53\x3b\xcf\xb7\x4c\x8a\xe7\x3a\x9b\x26\xb0\x5b\x68\x1f\x72\x34\x7b\x4d\x36\x86\x79\xae\x39\x6b\x07\x94\xac\x3b\x9e\x51\x69\x6a\x74\xf4\xc9\x3a\x34\x62\x3d\xb6\xe9\x45\xd2\x7a\x1b\xda\xa7\xb2\xd8\xff\xee\x7b\x11\xd1\x98\xe8\xff\x0f\xa3\x52\x3a\xa3\x9a\x26\x74\x05\xcf\x05\xd9\x11\xa5\xb2\x11\x62\x1f\xd2\x8f\xb1\xd5\xd1\xd7\x41\xee\xae\x6f\xc4\xde\x3f\x07\x33\x78\x40\x17\x93\xc7\x40\x0b\x18\x74\x8e\xa5\xc4\x6c\x47\x1b\xfe\x35\xda\x2b\xec\x25\xe4\x1f\xfc\x35\xf5\x9b\x79\x0c\x6a\x40\xd7\x14\x52\xc1\x28\x17\x03\xde\xdd\xd4\xab\x0b\xcb\xa4\x53\xc2\x8e\x13\x1e\xa9\xb6\xf3\xca\x17\x4f\x65\xdd\xe9\x5f\xfb\x0c\x66\x9e\x19\x93\xa2\xfe\xe0\x52\xac\x6f\xe8\x67\x00\x00\x00\xff\xff\xac\x6e\x73\x72\x53\x03\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 851, mode: os.FileMode(420), modTime: time.Unix(1592077244, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/app.js":     assetsAppJs,
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"app.js":     &bintree{assetsAppJs, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
